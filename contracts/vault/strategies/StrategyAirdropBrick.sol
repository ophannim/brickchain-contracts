// SPDX-License-Identifier: MIT
pragma solidity 0.6.12;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Pausable.sol";
import "../../Builder.sol";

/**
 * @dev Implementation of a strategy to participate in brick airdrops
 */
contract StrategyAirdropLP is Ownable, Pausable {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    /**
     * @dev Tokens Used:
     * {brick} - Token generated by staking our funds. In this case it's the CAKEs token.
     * {lpPair} - Token that the strategy maximizes. The same token that users deposit in the vault.
     */
    address public constant brick =
        address(0xc4daa5a9f2b832ed0f9bc579662883cd53ea9d61);
    address public lpPair;

    /**
     * {builder} - Builder contract
     * {poolId} - Builder pool id
     */
    address public constant builder =
        address(0x7854Fb0EdD06a880EC8009c62b1Aa38E26F9988D);
    uint8 public poolId;

    /**
     * @dev Brick Contracts:
     * {vault} - Address of the vault that controls the strategy's funds.
     */
    address public vault;

    /**
     * @dev Event that is fired each time someone harvests the strat.
     */
    event StratHarvest(address indexed harvester);

    /**
     * @dev Initializes the strategy.
     */
    constructor(
        address _lpPair,
        uint8 _poolId,
        address _vault
    ) public {
        lpPair = _lpPair;
        poolId = _poolId;
        vault = _vault;

        IERC20(lpPair).safeApprove(builder, uint256(-1));
        IERC20(brick).safeApprove(unirouter, uint256(-1));
    }

    /**
     * @dev Function that puts the funds to work.
     * It gets called whenever someone deposits in the strategy's vault contract.
     * It deposits {lpPair} in the Builder to farm {brick}
     */
    function deposit() public whenNotPaused {
        uint256 pairBal = IERC20(lpPair).balanceOf(address(this));

        if (pairBal > 0) {
            Builder(builder).deposit(poolId, pairBal);
        }
    }

    /**
     * @dev Withdraws funds and sents them back to the vault.
     * It withdraws {lpPair} from the Builder.
     * The available {lpPair} minus fees is returned to the vault.
     */
    function withdraw(uint256 _amount) external {
        require(msg.sender == vault, "!vault");

        uint256 pairBal = IERC20(lpPair).balanceOf(address(this));

        if (pairBal < _amount) {
            Builder(builder).withdraw(poolId, _amount.sub(pairBal));
            pairBal = IERC20(lpPair).balanceOf(address(this));
        }

        if (pairBal > _amount) {
            pairBal = _amount;
        }

        IERC20(lpPair).safeTransfer(vault, pairBal);
    }

    /**
     * @dev Core function of the strat.
     * 1. It claims rewards from the Builder.
     * 5. It deposits the new LP tokens.
     */
    function harvest() external whenNotPaused {
        require(!Address.isContract(msg.sender), "!contract");
        Builder(builder).deposit(poolId, 0);
        deposit();

        emit StratHarvest(msg.sender);
    }

    /**
     * @dev Function to calculate the total underlaying {lpPair} held by the strat.
     * It takes into account both the funds in hand, as the funds allocated in the Builder.
     */
    function balanceOf() public view returns (uint256) {
        return balanceOfLpPair().add(balanceOfPool());
    }

    /**
     * @dev It calculates how much {lpPair} the contract holds.
     */
    function balanceOfLpPair() public view returns (uint256) {
        return IERC20(lpPair).balanceOf(address(this));
    }

    /**
     * @dev It calculates how much {lpPair} the strategy has allocated in the Builder
     */
    function balanceOfPool() public view returns (uint256) {
        (uint256 _amount, ) = Builder(builder).userInfo(poolId, address(this));
        return _amount;
    }

    /**
     * @dev Function that has to be called as part of strat migration. It sends all the available funds back to the
     * vault, ready to be migrated to the new strat.
     */
    function retireStrat() external {
        require(msg.sender == vault, "!vault");

        Builder(builder).emergencyWithdraw(poolId);

        uint256 pairBal = IERC20(lpPair).balanceOf(address(this));
        IERC20(lpPair).transfer(vault, pairBal);
    }

    /**
     * @dev Pauses deposits. Withdraws all funds from the Builder, leaving rewards behind
     */
    function panic() public onlyOwner {
        pause();
        Builder(builder).emergencyWithdraw(poolId);
    }

    /**
     * @dev Pauses the strat.
     */
    function pause() public onlyOwner {
        _pause();

        IERC20(lpPair).safeApprove(builder, 0);
        IERC20(brick).safeApprove(unirouter, 0);
    }

    /**
     * @dev Unpauses the strat.
     */
    function unpause() external onlyOwner {
        _unpause();

        IERC20(lpPair).safeApprove(builder, uint256(-1));
        IERC20(brick).safeApprove(unirouter, uint256(-1));
    }

    /**
     * @dev Updates address where strategist fee earnings will go.
     * @param _strategist new strategist address.
     */
    function setStrategist(address _strategist) external {
        require(msg.sender == strategist, "!strategist");
        strategist = _strategist;
    }
}
